/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BD.Conexion;
import Clases.Comprobante;
import Clases.Factura;
import Clases.Proveedor;
import Clases.Recibo;
import Clases.tipoComprobante;
import Clases.tipoMoneda;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import net.coderazzi.filters.gui.AutoChoices;
import net.coderazzi.filters.gui.TableFilterHeader;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author emiliano
 */
public class EstadodeCuenta extends javax.swing.JFrame {

    TableFilterHeader filterHeader = null;

    /**
     * Creates new form EstadodeCuenta
     */
    public EstadodeCuenta() {
        initComponents();
        AutoCompleteDecorator.decorate(this.jCBProveedor);
        List<Proveedor> LProv = Conexion.getInstance().listadoProveedores();
        LProv.forEach((p) -> {
            if (!p.isDeshabilitado()) {
                this.jCBProveedor.addItem(p);
            }
        });

        jTableComprobantes.getColumnModel().getColumn(11).setMinWidth(0);
        jTableComprobantes.getColumnModel().getColumn(11).setMaxWidth(0);
        jTableComprobantes.getColumnModel().getColumn(11).setWidth(0);

        //Permite agregar un filtro de búsqueda por cada columna.
        filterHeader = new TableFilterHeader(jTableComprobantes, AutoChoices.ENABLED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jCBProveedor = new javax.swing.JComboBox<>();
        jDateChooserDesde = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jDateChooserHasta = new com.toedter.calendar.JDateChooser();
        jButtonConsultar = new javax.swing.JButton();
        jCheckBoxSinFecha = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableComprobantes = new javax.swing.JTable();
        jButtonCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Proveedor");

        jLabel2.setText("Desde");

        jLabel3.setText("Hasta");

        jButtonConsultar.setText("Consultar");
        jButtonConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarActionPerformed(evt);
            }
        });

        jCheckBoxSinFecha.setText("Sin fecha");
        jCheckBoxSinFecha.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxSinFechaItemStateChanged(evt);
            }
        });
        jCheckBoxSinFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSinFechaActionPerformed(evt);
            }
        });

        jTableComprobantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tipo", "Numero", "Moneda", "Importe", "Pendiente", "Debe", "Haber", "Saldo $", "Saldo USD", "Observación", "objeto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableComprobantes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableComprobantesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableComprobantes);
        if (jTableComprobantes.getColumnModel().getColumnCount() > 0) {
            jTableComprobantes.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTableComprobantes.getColumnModel().getColumn(4).setPreferredWidth(50);
            jTableComprobantes.getColumnModel().getColumn(6).setPreferredWidth(50);
            jTableComprobantes.getColumnModel().getColumn(7).setPreferredWidth(50);
            jTableComprobantes.getColumnModel().getColumn(8).setPreferredWidth(50);
            jTableComprobantes.getColumnModel().getColumn(9).setPreferredWidth(60);
            jTableComprobantes.getColumnModel().getColumn(10).setPreferredWidth(250);
        }

        jButtonCerrar.setText("Cerrar");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 997, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCBProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooserDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooserHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxSinFecha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConsultar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(930, 930, 930)
                        .addComponent(jButtonCerrar)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(jCBProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooserHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonConsultar)
                        .addComponent(jCheckBoxSinFecha)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCerrar)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarActionPerformed
        DefaultTableModel model = (DefaultTableModel) this.jTableComprobantes.getModel();
        Date fechaDesde = this.jDateChooserDesde.getDate();
        Date fechaHasta = this.jDateChooserHasta.getDate();
        //String valorCombo = this.jComboBox1.getSelectedItem().toString();
        Proveedor p = (Proveedor) this.jCBProveedor.getSelectedItem();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        if (p == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "No hay proveedores.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {

            if (fechaDesde != null && fechaHasta != null) {
                if (!jCheckBoxSinFecha.isSelected()) {
                    if (fechaDesde.after(fechaHasta)) {
                        javax.swing.JOptionPane.showMessageDialog(null, "Fecha desde debe ser menor a fecha hasta.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            //Cuando el usuario selecciona ambos pero sin fecha.
            if (jCheckBoxSinFecha.isSelected()) {
                model.setRowCount(0);
                List<Factura> ListaFact = Conexion.getInstance().ListarFacturas(p);
                List<Recibo> listaRecibos = Conexion.getInstance().listarRecibos(p.getCodigo());
                List<Comprobante> comprobantes = agregarComprobantes(ListaFact, listaRecibos);
                Float saldo_pesos = 0f, saldo_dolares = 0f;
                if (comprobantes == null) {
                    javax.swing.JOptionPane.showMessageDialog(null, "No existe ningún comprobante", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                } else {
                    for (Comprobante comprobante : comprobantes) {
                        if (comprobante instanceof Factura) {
                            Factura f = (Factura) comprobante;
                            if (f.getTipo() != tipoComprobante.Contado && f.getTipo() != tipoComprobante.DevolucionContado) {
                                if (f.getTipo() == tipoComprobante.Credito) {
                                    if (f.getMoneda() == tipoMoneda.$U) {
                                        saldo_pesos = saldo_pesos - f.getTotal();
                                        String numeroComp = f.getSerieComprobante() + "-" + f.getNroComprobante();
                                        model.addRow(new Object[]{sdf.format(f.getFecha()), f.getTipo().toString(),
                                            numeroComp, f.getMoneda().toString(), f.getTotal(), f.getPendiente(), String.valueOf(-f.getTotal()),
                                            "", saldo_pesos, saldo_dolares, f.getObservacion(), f});
                                    } else if (f.getMoneda() == tipoMoneda.US$) {
                                        saldo_dolares = saldo_dolares - f.getTotal();
                                        String numeroComp = f.getSerieComprobante() + "-" + f.getNroComprobante();
                                        model.addRow(new Object[]{sdf.format(f.getFecha()), f.getTipo().toString(),
                                            numeroComp, f.getMoneda().toString(), f.getTotal(), f.getPendiente(), String.valueOf(-f.getTotal()),
                                            "", saldo_pesos, saldo_dolares, f.getObservacion(), f});
                                    }
                                } else if (f.getTipo() == tipoComprobante.NotaCredito) {
                                    if (f.getMoneda() == tipoMoneda.$U) {
                                        saldo_pesos = saldo_pesos + f.getTotal();
                                        String numeroComp = f.getSerieComprobante() + "-" + f.getNroComprobante();
                                        model.addRow(new Object[]{sdf.format(f.getFecha()), f.getTipo().toString(),
                                            numeroComp, f.getMoneda().toString(), f.getTotal(), f.getPendiente(), " ",
                                            String.valueOf(-f.getTotal()), saldo_pesos, saldo_dolares, f.getObservacion(), f});
                                    } else if (f.getMoneda() == tipoMoneda.US$) {
                                        saldo_dolares = saldo_dolares + f.getTotal();
                                        String numeroComp = f.getSerieComprobante() + "-" + f.getNroComprobante();
                                        model.addRow(new Object[]{sdf.format(f.getFecha()), f.getTipo().toString(),
                                            numeroComp, f.getMoneda().toString(), f.getTotal(), f.getPendiente(), " ",
                                            String.valueOf(-f.getTotal()), saldo_pesos, saldo_dolares, f.getObservacion(), f});
                                    }
                                }
                            }
                        } else {
                            Recibo r = (Recibo) comprobante;
                            if (r.getMoneda() == tipoMoneda.$U) {
                                saldo_pesos = saldo_pesos + r.getTotal();
                                String numeroComp = r.getSerieComprobante() + "-" + r.getNroComprobante();
                                model.addRow(new Object[]{sdf.format(r.getFecha()), "Recibo",
                                    numeroComp, r.getMoneda().toString(), r.getTotal(), "", "",
                                    String.valueOf(-r.getTotal()), saldo_pesos, saldo_dolares, r.getObservacion(), r});
                            } else if (r.getMoneda() == tipoMoneda.US$) {
                                saldo_dolares = saldo_dolares + r.getTotal();
                                String numeroComp = r.getSerieComprobante() + "-" + r.getNroComprobante();
                                model.addRow(new Object[]{sdf.format(r.getFecha()), "Recibo",
                                    numeroComp, r.getMoneda().toString(), r.getTotal(), "", "",
                                    String.valueOf(-r.getTotal()), saldo_pesos, saldo_dolares, r.getObservacion(), r});
                            }
                        }
                    }
                }
            }

            //Cuando el usuario selecciona ambos pero con fecha.
            if (!jCheckBoxSinFecha.isSelected()) {
                model.setRowCount(0);
                if (fechaDesde == null && fechaHasta == null) {
                    javax.swing.JOptionPane.showMessageDialog(null, "No ha ingresado ninguna fecha.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                } else if (fechaDesde == null || fechaHasta == null) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Falta ingresar una de las fechas.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                } else {
                    // en esta parte recorro todas las facturas anteriores a la fecha que selcciono, para obtener el saldo en pesos y en dolares que venian de antes
                    Float saldo_pesos = 0f, saldo_dolares = 0f;
                    List<Factura> ListaFactAnteriores = Conexion.getInstance().ListarFacturasAnterioresAFecha(p.getCodigo(), fechaDesde);
                    List<Recibo> listaRecibosAnteriores = Conexion.getInstance().listarRecibosAnterioresAFecha(p.getCodigo(), fechaDesde);
                    List<Comprobante> comprobantesAnteriores = agregarComprobantes(ListaFactAnteriores, listaRecibosAnteriores);
                    for (Comprobante comprobante_anteriores : comprobantesAnteriores) {
                        if (comprobante_anteriores instanceof Factura) {
                            Factura f = (Factura) comprobante_anteriores;
                            if (f.getTipo() != tipoComprobante.Contado && f.getTipo() != tipoComprobante.DevolucionContado) {
                                if (f.getTipo() == tipoComprobante.Credito) {
                                    if (f.getMoneda() == tipoMoneda.$U) {
                                        saldo_pesos = saldo_pesos - f.getTotal();
                                    } else if (f.getMoneda() == tipoMoneda.US$) {
                                        saldo_dolares = saldo_dolares - f.getTotal();
                                    }
                                } else if (f.getTipo() == tipoComprobante.NotaCredito) {
                                    if (f.getMoneda() == tipoMoneda.$U) {
                                        saldo_pesos = saldo_pesos + f.getTotal();
                                    } else if (f.getMoneda() == tipoMoneda.US$) {
                                        saldo_dolares = saldo_dolares + f.getTotal();
                                    }
                                }
                            }
                        } else {
                            Recibo r = (Recibo) comprobante_anteriores;
                            if (r.getMoneda() == tipoMoneda.$U) {
                                saldo_pesos = saldo_pesos + r.getTotal();
                            } else if (r.getMoneda() == tipoMoneda.US$) {
                                saldo_dolares = saldo_dolares + r.getTotal();
                            }
                        }
                    }
                    // a partir de aca si recorro las facturas en las fechas seleccionadas
                    List<Factura> ListaFact = Conexion.getInstance().ListarFacturasPorFecha(p.getCodigo(), fechaDesde, fechaHasta);
                    List<Recibo> listaRecibos = Conexion.getInstance().listarRecibosPorFecha(p.getCodigo(), fechaDesde, fechaHasta);
                    List<Comprobante> comprobantes = agregarComprobantes(ListaFact, listaRecibos);
                    if (comprobantes.isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(null, "No existe ningún comprobante", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {
                        for (Comprobante comprobante : comprobantes) {
                            if (comprobante instanceof Factura) {
                                Factura f = (Factura) comprobante;
                                if (f.getTipo() != tipoComprobante.Contado && f.getTipo() != tipoComprobante.DevolucionContado) {
                                    if (f.getTipo() == tipoComprobante.Credito) {
                                        if (f.getMoneda() == tipoMoneda.$U) {
                                            saldo_pesos = saldo_pesos - f.getTotal();
                                            String numeroComp = f.getSerieComprobante() + "-" + f.getNroComprobante();
                                            model.addRow(new Object[]{sdf.format(f.getFecha()), f.getTipo().toString(),
                                                numeroComp, f.getMoneda().toString(), f.getTotal(), f.getPendiente(), String.valueOf(-f.getTotal()),
                                                "", saldo_pesos, saldo_dolares, f.getObservacion(), f});
                                        } else if (f.getMoneda() == tipoMoneda.US$) {
                                            saldo_dolares = saldo_dolares - f.getTotal();
                                            String numeroComp = f.getSerieComprobante() + "-" + f.getNroComprobante();
                                            model.addRow(new Object[]{sdf.format(f.getFecha()), f.getTipo().toString(),
                                                numeroComp, f.getMoneda().toString(), f.getTotal(), f.getPendiente(), String.valueOf(-f.getTotal()),
                                                "", saldo_pesos, saldo_dolares, f.getObservacion(), f});
                                        }
                                    } else if (f.getTipo() == tipoComprobante.NotaCredito) {
                                        if (f.getMoneda() == tipoMoneda.$U) {
                                            saldo_pesos = saldo_pesos + f.getTotal();
                                            String numeroComp = f.getSerieComprobante() + "-" + f.getNroComprobante();
                                            model.addRow(new Object[]{sdf.format(f.getFecha()), f.getTipo().toString(),
                                                numeroComp, f.getMoneda().toString(), f.getTotal(), f.getPendiente(), " ",
                                                String.valueOf(-f.getTotal()), saldo_pesos, saldo_dolares, f.getObservacion(), f});
                                        } else if (f.getMoneda() == tipoMoneda.US$) {
                                            saldo_dolares = saldo_dolares + f.getTotal();
                                            String numeroComp = f.getSerieComprobante() + "-" + f.getNroComprobante();
                                            model.addRow(new Object[]{sdf.format(f.getFecha()), f.getTipo().toString(),
                                                numeroComp, f.getMoneda().toString(), f.getTotal(), f.getPendiente(), " ",
                                                String.valueOf(-f.getTotal()), saldo_pesos, saldo_dolares, f.getObservacion(), f});
                                        }
                                    }
                                }
                            } else {
                                Recibo r = (Recibo) comprobante;
                                if (r.getMoneda() == tipoMoneda.$U) {
                                    saldo_pesos = saldo_pesos + r.getTotal();
                                    String numeroComp = r.getSerieComprobante() + "-" + r.getNroComprobante();
                                    model.addRow(new Object[]{sdf.format(r.getFecha()), "Recibo",
                                        numeroComp, r.getMoneda().toString(), r.getTotal(), "", "",
                                        String.valueOf(-r.getTotal()), saldo_pesos, saldo_dolares, r.getObservacion(), r});
                                } else if (r.getMoneda() == tipoMoneda.US$) {
                                    saldo_dolares = saldo_dolares + r.getTotal();
                                    String numeroComp = r.getSerieComprobante() + "-" + r.getNroComprobante();
                                    model.addRow(new Object[]{sdf.format(r.getFecha()), "Recibo",
                                        numeroComp, r.getMoneda().toString(), r.getTotal(), "", "",
                                        String.valueOf(-r.getTotal()), saldo_pesos, saldo_dolares, r.getObservacion(), r});
                                }
                            }
                        }
                    }

                }
            }
        }
    }//GEN-LAST:event_jButtonConsultarActionPerformed

    private void jCheckBoxSinFechaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxSinFechaItemStateChanged
        if (this.jCheckBoxSinFecha.isSelected()) {
            this.jDateChooserHasta.setEnabled(false);
            this.jDateChooserDesde.setEnabled(false);
            this.jDateChooserDesde.setCalendar(null);
            this.jDateChooserHasta.setCalendar(null);
        } else {
            this.jDateChooserHasta.setEnabled(true);
            this.jDateChooserDesde.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxSinFechaItemStateChanged

    private void jCheckBoxSinFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSinFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSinFechaActionPerformed

    private void jTableComprobantesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableComprobantesMouseClicked
        if (this.jTableComprobantes.getModel().getValueAt(this.jTableComprobantes.getSelectedRow(), 11) instanceof Factura) {
            Factura fac = (Factura) this.jTableComprobantes.getModel().getValueAt(this.jTableComprobantes.getSelectedRow(), 11);
            AltaFactura af = new AltaFactura(fac);
            af.show();
        } else if (this.jTableComprobantes.getModel().getValueAt(this.jTableComprobantes.getSelectedRow(), 11) instanceof Recibo) {
            Recibo rec = (Recibo) this.jTableComprobantes.getModel().getValueAt(this.jTableComprobantes.getSelectedRow(), 11);
            AltaRecibo ar = new AltaRecibo(rec);
            ar.show();
        }
    }//GEN-LAST:event_jTableComprobantesMouseClicked

    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    private List<Clases.Comprobante> agregarComprobantes(List<Factura> ListaFact, List<Recibo> listaRecibos) {
        List<Clases.Comprobante> comprobantes = new ArrayList<>();

        if (!ListaFact.isEmpty()) {
            for (Factura factura : ListaFact) {
                comprobantes.add(factura);
            }
        }

        if (!listaRecibos.isEmpty()) {
            for (Recibo recibo : listaRecibos) {
                comprobantes.add(recibo);
            }
        }

        if (!comprobantes.isEmpty()) {
            Collections.sort(comprobantes, (Clases.Comprobante o1, Clases.Comprobante o2) -> o1.getFecha().compareTo(o2.getFecha()));
        }

        return comprobantes;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EstadodeCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EstadodeCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EstadodeCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EstadodeCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EstadodeCuenta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonConsultar;
    private javax.swing.JComboBox<Proveedor> jCBProveedor;
    private javax.swing.JCheckBox jCheckBoxSinFecha;
    private com.toedter.calendar.JDateChooser jDateChooserDesde;
    private com.toedter.calendar.JDateChooser jDateChooserHasta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableComprobantes;
    // End of variables declaration//GEN-END:variables
}
